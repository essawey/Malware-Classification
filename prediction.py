from time import time
StartTime = time()

import os
import argparse

# Set up command-line argument parser
parser = argparse.ArgumentParser(description="Run API with different models")
parser.add_argument("-g", "--global_urls", action="store_true", help="Use global URLs")
parser.add_argument("-l", "--local_urls", action="store_true", help="Use local URLs")
parser.add_argument("--top_K", action="store_true", help="Use top_K prediction")
parser.add_argument("--PCA", action="store_true", help="Use PCA prediction")
args = parser.parse_args()

# Check if output.csv exists, if not download it
if not os.path.exists("./output.csv"):
    import gdown
    gdown.download("https://drive.google.com/uc?id=1RVatZIXfKmUrTFQnF_jy4r-Qk7PgWev0", "output.zip")

import random
RandomNumber = random.randint(2500, 3000)

import pandas as pd
df = pd.read_csv("output.csv", nrows=RandomNumber).tail(1)

GroundTruth = df.Label.values[0]

df = df.drop(["0"], axis=1, errors="ignore")  # ID Column
df = df.dropna()  # Drop NaN values

X = df.iloc[:, :-1].values.tolist()


Global_URL_PCA = "https://5000-01hxpfw6f5r17vrncve03var3p.cloudspaces.litng.ai/predict_PCA"
Global_URL_top_K = "https://5000-01hxpfw6f5r17vrncve03var3p.cloudspaces.litng.ai/predict_top_K"
Global_URL_AE = "https://5000-01hxpfw6f5r17vrncve03var3p.cloudspaces.litng.ai/autoencoder"

Local_URL_top_K = "http://127.0.0.1:5000/predict_top_K"
Local_URL_PCA = "http://127.0.0.1:5000/predict_PCA"
Local_URL_AE = "http://127.0.0.1:5000/autoencoder"


# Send request to API
JSON = {
    "X": X,
    "RowNumber": RandomNumber,
    "GroundTruth": GroundTruth,
}

import requests
from config import TOKEN
headers = {"Authorization": f"Bearer {TOKEN}"}


if args.global_urls and args.top_K:
    response = requests.post(Global_URL_top_K, headers=headers, json=JSON)
elif args.global_urls and args.PCA:
    response = requests.post(Global_URL_PCA, headers=headers, json=JSON)
elif args.local_urls and args.top_K:
    response = requests.post(Local_URL_top_K, headers=headers, json=JSON)
else:
    response = requests.post(Local_URL_PCA, headers=headers, json=JSON)


prediction = response.json()['prediction']

print(f"""
    +{'='*30}+
    | Random row #: {RandomNumber:<14} |
    +{'-'*30}+
    | True Label: {GroundTruth:<16} |
    +{'-'*30}+
    | Predicted Label: {prediction:<11} |
    +{'-'*30}+
    | Prediction time: {time()-StartTime:.1f} seconds |
    +{'='*30}+

""")

'''
=============  Run Example: =============

python prediction.py --global_urls --top_K
python prediction.py --global_urls --PCA
python prediction.py --local_urls --top_K
python prediction.py --local_urls --PCA

=========================================
'''